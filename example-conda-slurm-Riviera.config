process {

    withName: COASSEMBLY {
        conda = "${params.assembly_env}"

        executor="slurm"
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xsml_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")
    }

    withName: CREATE_DB {
        conda = "${params.support_env}"
        executor="slurm" 
        cpus = '1'
        time = "${params.time}"
        memory = "${params.xsml_job}"

        publishDir = [
            path: "${params.outdir}/MAG_db",
            mode: 'copy',
        ]
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")        
        maxForks = 1
    }

    withName: CREATE_INPUT_DB {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = '1'
        time = "${params.time}"
        memory = "${params.sml_job}"

        publishDir = [
            path: "${params.outdir}/MAG_db",
            mode: 'copy',
        ]
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")
        maxForks = 1
    }

    withName: CREATE_MAPPING_DB {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")
        maxForks = 1
    }

    withName: FASTQC {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.sml_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")
        maxForks = 1
    }

    withName: SICKLE_PE {
        conda = "${params.support_env}"
        
        executor="slurm" 
        cpus = '1'
        time = "${params.time}"
        memory = "${params.lrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/sickle_v1.33",
            mode: 'copy',
        ]

        maxForks = 1
    }

    withName: MULTIQC {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = '1'
        time = "${params.time}"
        memory = "${params.lrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/multiQC_v1.14",
            mode: 'copy',
        ]

        maxForks = 1
    }

    withName: FASTP {
        conda = "${params.support_env}"
        
        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.lrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/fastp_v0.23.2",
            mode: 'copy',
        ]

        maxForks = 1
    }

    withName: MEGAHIT {
        container = conda = "${params.assembly_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/megahit_v1.2.9",
            mode: 'copy',
            pattern: 'logs/*.log',
            pattern: 'all_contigs/*'
        ]

        maxForks = 5
    }

    withName: METASPADES {
        container = conda = "${params.spades_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/metaSPAdes_v3.15.5",
            mode: 'copy',
            pattern: 'logs/*.log',
            pattern: 'all_contigs/*'
        ]

        maxForks = 1
    }

    withName: IDBA {
        container = conda = "${params.assembly_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/IDBA_v1.1.3",
            mode: 'copy',
            pattern: 'logs/*.log',
            pattern: 'all_contigs/*'
        ]

        maxForks = 1
    }

    withName: ASSEMBLY_STATS {
        conda = "${params.assembly_env}"

        executor="slurm" 
        cpus = '1'
        time = "${params.time}"
        memory = "${params.xsml_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/assembly_stats",
            mode: 'copy',
        ]
    }

    withName: CALL_GENES {
        conda = "${params.assembly_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.lrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/prodigal_v2.6.3",
            mode: 'copy',
        ]
    }  

    withName: MAP_BIN {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/metabat_v2.15",
            mode: 'copy',
        ]

        maxForks = 2
    }

    withName: CHECKMTWO {
        conda = "${params.checkm2_env}"

        executor="slurm"
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.lrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/checkm2_v1.0.1",
            mode: 'copy',
        ]

        maxForks = 1
    }

    withName: FILTER_BINS {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = '1'
        time = "${params.time}"
        memory = "${params.sml_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/metabat_v2.15",
            mode: 'copy',
        ]
        maxForks = 1
    }

    withName: MAG_DB {
        conda = "${params.support_env}"
        executor="slurm"         
        cpus = '1'
        time = "${params.time}"
        memory = "${params.sml_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/MAG_db",
            mode: 'copy',
        ]
        maxForks = 1
    }

    withName: GET_UNMAPPED {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/MAG_db",
            mode: 'copy',
            pattern: 'unmapped_bam/*',
            pattern: '*.log'
        ]  
        maxForks = 1 
    }

    withName: GET_UNMAPPED_INPUT_DB {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")

        publishDir = [
            path: "${params.outdir}/MAG_db",
            mode: 'copy',
            pattern: 'unmapped_bam/*',
            pattern: '*.log'
        ]  
        maxForks = 1 
    }

    withName: READ_MAPPING {
        conda = "${params.support_env}"

        executor="slurm" 
        cpus = "${params.threads}"
        time = "${params.time}"
        memory = "${params.xlrg_job}"
        queue = "${params.slurm_partition}"
        clusterOptions = (params.slurm_node ? "--nodelist=${params.slurm_node} " : "")
        
        publishDir = [
            path: "${params.outdir}/Bowtie2_v2.5.1",
            mode: 'copy',
        ]
        maxForks = 1
    }
}
